import { useState } from 'react'
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import fetchSSR from 'node-fetch'
import Alert from 'react-popup-alert'
import 'react-popup-alert/dist/index.css'
import { getSession, signIn, signOut } from "next-auth/react"
import Link from "next/link"

// import { Wheel } from "react-custom-roulette"
// https://github.com/effectussoftware/react-custom-roulette/issues/4
import dynamic from "next/dynamic"
const Wheel = dynamic(
  () => {
    return import("react-custom-roulette").then((mod) => mod.Wheel);
  },
  { ssr: false }
);

export async function getServerSideProps({ req }) {
  const session = await getSession({ req })
  const res = await fetchSSR(`${process.env.API_SERVER_URL}/api/emojis`, {
    headers: {
      'Authorization': `Bearer ${process.env.API_TOKEN}`
    }
  })
  const data = await res.json()
  return {
    props: {
      emojis: data.data,
      session
    }
  }
}

const gitHubStyle = { background: 'linear-gradient(to bottom, #cccccc 5%, #eeeeee 100%)', backgroundColor: '#cccccc' }

const SignInButton = () => {
  return (
    <Link href="/api/auth/signin">
      <button className={styles.myButton} style={gitHubStyle}
        onClick={(e) => {
          e.preventDefault();
          signIn('github');
        }}
      >
        Login <img src="/icons8-github.svg" alt="Github" />
      </button>
    </Link>
  );
};

const SignOutButton = ({ avatarURL }) => {
  return (
    <Link href="/api/auth/signout">
      <button className={styles.myButton} style={{ padding: '4px 8px 4px 8px', fontSize: '16px', ...gitHubStyle }}
        onClick={(e) => {
          e.preventDefault();
          signOut();
        }}
      >
        <img className={styles.avatar} src={avatarURL} /> Salir
      </button>
    </Link>
  );
};

export default function Home({ emojis, session }) {
  const [mustSpin, setMustSpin] = useState(false);
  const [prizeNumber, setPrizeNumber] = useState(0);
  const [alert, setAlert] = useState({
    type: '',
    text: '',
    show: false
  })
  const emojiOptions = emojis.map((emoji, idx) => ({ ...emoji, option: emoji.attributes.character }))

  const handleSpinClick = () => {
    fetch('api/find-gold')
      .then((res) => res.json())
      .then((data) => {
        const prizeId = emojiOptions.findIndex((emoji) => emoji.id === data.id)
        setPrizeNumber(prizeId)
        setMustSpin(true)
      })
  }

  const onCloseAlert = () => {
    setAlert({
      type: '',
      text: '',
      show: false
    })
  }

  if (session) console.log({ session })

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.navbar}>
        {session && <SignOutButton avatarURL={session.user && session.user.image} />}
      </div>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Bienvenido ü§† a la b√∫squeda del üëë!!!
        </h1>

        <p className={styles.description}>
          {session
            ? 'Prueba suerte, pica un poco y a ver que encuentras...'
            : 'Para poder jugar...dime qui√©n eres'
          }
        </p>

        <span>
          <section className={styles.actions}>
            {!session && <SignInButton />}
            {session &&
              <button className={styles.myButton}
                disabled={mustSpin}
                onClick={handleSpinClick}
              >
                {mustSpin ? 'Suerte!!!' : 'A picar!!! ‚õè'}
              </button>
            }
          </section>
        </span>

        <div className={styles.grid}>
          <Wheel
            mustStartSpinning={mustSpin}
            prizeNumber={prizeNumber}
            data={emojiOptions}
            outerBorderColor={["#f2f2f2"]}
            outerBorderWidth={[25]}
            innerBorderColor={["#f2f2f2"]}
            radiusLineColor={["#dedede"]}
            radiusLineWidth={[10]}
            textColors={["#ffffff"]}
            fontSize={[50]}
            perpendicularText={[true]}
            backgroundColors={[
              "#ff492f",
              "#ff8a00",
              "#9e79e5",
              "#04cf35",
              "#00b8ff",
              "#e8d739",
              "#ff61ce",
              "#1f8d9c"
            ]}
            onStopSpinning={() => {
              setMustSpin(false);
              const emojiResult = emojiOptions[prizeNumber]
              setAlert({
                type: emojiResult.attributes.name === 'crown' ? 'success' : 'error',
                header: emojiResult.attributes.character,
                text: emojiResult.attributes.description,
                show: true
              })
            }}
          />
        </div>
        <Alert
          header={alert.header}
          btnText={'Cerrar'}
          text={alert.text}
          type={alert.type}
          show={alert.show}
          onClosePress={onCloseAlert}
          pressCloseOnOutsideClick={true}
          showBorderBottom={true}
          alertStyles={{}}
          headerStyles={{ fontSize: '48px', margin: '0.4em' }}
          textStyles={{ padding: '10px' }}
          buttonStyles={{ margin: '0.3em' }}
        />
      </main>
    </div>
  )
}
